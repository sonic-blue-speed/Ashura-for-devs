global u8 Ashurashoes.palette
global u8 Ashurashoes
global u8 AshuraSign
global u8 AshuraDash
global u8 AshuraPartner
global u8 AshuraSprites
global u8 ShieldEffectActive //Controls if the shield effect should be seen or not when super
define u16 continueHUD.y = 185
define u16 continueHUD.x = 20

function void ExtraChar.startup_char168()
{
	global.characters =  CHARS_SONIC_ALONE
}

function string ExtraChar.getCharacterName(u8 xtrachar)
{
    if (global.xtrachar == 168)
        return "Ashura"
    return base.ExtraChar.getCharacterName(xtrachar)
}

//check for comp stats
function bool ExtraChar.CompetitionMode.isCharacterAvailable(u8 xtrachar)
{
	if (xtrachar == 168)
		return true
	
	return base.ExtraChar.CompetitionMode.isCharacterAvailable(xtrachar)
}

function string RenderExtraCharIcon(u8 xtrachar)
{
    if (xtrachar == 168)
        return "AshuraS3C"

    return base.RenderExtraCharIcon(xtrachar)
}

//@ Original function taken from sonic3air_dev/scripts/maingame/hud/hud.lemon
function bool ExtraChar.renderHUD_char168()
{
#if STANDALONE
	if (DEBUG_DISABLE_HUD)
		return false
#endif

	s16 baseX = global.level_started
	if (baseX < 0)
	{
		baseX += 8
		global.level_started = baseX
	}
	baseX += 0x0f
	s16 baseY = 0x08
	u16 renderQueue = 0xe000

	bool isBonusStage = (global.zone >= 0x13 && global.zone <= 0x15)
#if STANDALONE
	if (!debug_mode.state)
	{
		if (!isBonusStage)
		{
			// Score
			HUD.drawSprite("hud_text_score", baseX, baseY, renderQueue)
			++renderQueue
			HUD.drawNumber("hud_digit_%d", player.score * 10, baseX + 0x58, baseY, renderQueue)
			++renderQueue

			// Continue hud mod
			if (Renderer.hasCustomSprite("soniccont"))
			{
				u64 key = "ESS_Cont_Es168"

				if (Mods.isModActive("Continues HUD"))
				{
					Renderer.drawCustomSprite(key, baseX + continueHUD.x -  11, continueHUD.y +  13, 0, SPRITE_FLAG_PRIO, 0xe000, 0,255)

					if (continues_counter >= 10)
					{
						HUD.drawSmallDigit(u16((continues_counter / 10) % 10), baseX + continueHUD.x, continueHUD.y, 0xe000)
						HUD.drawSmallDigit(u16(continues_counter % 10), baseX + continueHUD.x + 8, continueHUD.y, 0xe000)
					}
					else
						HUD.drawSmallDigit(u16(continues_counter % 10), baseX + continueHUD.x, continueHUD.y, 0xe000)
				}
				else if (Mods.isModActive("Continues HUD Extra"))
				{
					u16 continuetick = 0
					u16 continuemove = 0
					u16 continuemove.y = (-13)
					while (continuetick < continues_counter)
					{
						Renderer.drawCustomSprite(key, baseX + continueHUD.x - 11 + continuemove, max(continueHUD.y - continuemove.y, 0), 0, SPRITE_FLAG_PRIO, 0xe000, 0,255)
						continuemove += 21
						++continuetick
						if (continuemove > 370)
						{
							continuemove = 0
							continuemove.y += 26
						}
					}
				}
			}

			// Time
			{
				bool show = (timer.minutes < 9 || isBonusStage || (level.framecounter & 0x08) || Game.getSetting(SETTING_INFINITE_TIME))
				HUD.drawSprite(show ? "hud_text_time" : "hud_text_time_red", baseX, baseY + 0x10, renderQueue)
				++renderQueue

				// Unfortunately, the time progress is done later inside the frame, so we don't have the right value in "timer.frames" yet
				//  -> If the conditions for time progress are met, add one and everything will be alright
				u16 minutes = timer.minutes
				u16 seconds = timer.seconds
				u16 frames = timer.frames
				if (hud.dirty.timer && !global.game.paused && timer.alldata < 0x93b3b)	// That is 9:59 and 59 frames
				{
					++frames
					seconds += (frames / 60)
					minutes += (seconds / 60)
					frames %= 60
					seconds %= 60
				}
				u16 centiseconds = (frames * 99 + 30) / 59

				u16 px = (minutes >= 10) ? (baseX + 8) : baseX
				if (Game.getSetting(SETTING_EXTENDED_HUD))
				{
					if (minutes >= 10)
						HUD.drawDigit(minutes / 10, px + 0x20, baseY + 0x10, renderQueue)
					HUD.drawDigit(minutes % 10, px + 0x28, baseY + 0x10, renderQueue)
					HUD.drawSprite("hud_char_minutes", px + 0x30, baseY + 0x10, renderQueue)
					HUD.drawDigit(seconds / 10, px + 0x38, baseY + 0x10, renderQueue)
					HUD.drawDigit(seconds % 10, px + 0x40, baseY + 0x10, renderQueue)
					HUD.drawSprite("hud_char_seconds", px + 0x48, baseY + 0x10, renderQueue)
					HUD.drawDigit(centiseconds / 10, px + 0x50, baseY + 0x10, renderQueue)
					if (minutes < 10)
						HUD.drawDigit(centiseconds % 10, px + 0x58, baseY + 0x10, renderQueue)
				}
				else
				{
					if (minutes >= 10)
						HUD.drawDigit(minutes / 10, px + 0x20, baseY + 0x10, renderQueue)
					HUD.drawDigit(minutes % 10, px + 0x28, baseY + 0x10, renderQueue)
					HUD.drawSprite("hud_char_colon", px + 0x30, baseY + 0x10, renderQueue)
					HUD.drawDigit(seconds / 10, px + 0x38, baseY + 0x10, renderQueue)
					HUD.drawDigit(seconds % 10, px + 0x40, baseY + 0x10, renderQueue)
				}
				++renderQueue
			}
		}

		// Rings
		{
			u16 py = (isBonusStage) ? baseY : baseY + 0x20
			bool show = (ring_counter != 0 || (level.framecounter & 0x08))
			HUD.drawSprite(show ? "hud_text_rings" : "hud_text_rings_red", baseX, py, renderQueue)
			++renderQueue

			u16 px = baseX + (!isBonusStage && Game.getSetting(SETTING_EXTENDED_HUD) ? 0x58 : 0x40)
			for (u32 value = ring_counter;;)
			{
				HUD.drawDigit(value % 10, px, py, renderQueue)
				px -= 8
				value /= 10
				if (value == 0)
					break
			}
			++renderQueue
		}

		// Lives (not visible in Time Attack or with infinite lives setting)
		if (!Game.isTimeAttack() && !Game.getSetting(SETTING_INFINITE_LIVES))
		{
			bool useMobilePosition = HUD.useMobileLivesDisplay()
			u16 px = useMobilePosition ? (getScreenWidth() - baseX - 0x30) : baseX
			u16 py = useMobilePosition ? baseY : 200

			HUD.drawSprite(getCharacterLivesIcon(getMainCharacter()), px, py, renderQueue)
			++renderQueue
      HUD.drawSprite("ashura_name", px, py, renderQueue)
			++renderQueue
			if (lives_counter >= 10)
				HUD.drawSmallDigit(u16((lives_counter / 10) % 10), px + 0x20, py + 8, renderQueue)
			HUD.drawSmallDigit(u16(lives_counter % 10), px + 0x28, py + 8, renderQueue)
		}
	}
	else
#endif
	{
		D4 = (isBonusStage) ? 8 : 0

		if ((level.framecounter & 0x08) == 0)
		{
			if (ring_counter == 0)
			{
				D4 += 2		// Set rings HUD text to flicker
			}
			if (timer.minutes == 9 && !isBonusStage)
			{
				D4 += 4		// Set timer HUD text to flicker
			}
		}

		// Targets:
		//  - 0x00dbc2	-> D4.u16 = 0x00		// Complete HUD text
		//  - 0x00dc00	-> D4.u16 = 0x02		// HUD with rings text flickering
		//  - 0x00dc32	-> D4.u16 = 0x04		// HUD with time text flickering
		//  - 0x00dc6a	-> D4.u16 = 0x06		// HUD with both rings and time flickering
		//  - 0x00dc96	-> D4.u16 = 0x08		// Bonus stage HUD
		//  - 0x00dcb6	-> D4.u16 = 0x0a		// Bonus stage HUD with rings text flickering
		A1 = tableLookupAddress(0x00dbb6, D4.u16)

		D4.s16 = u16[A1] - 1
		D0.s16 = baseX + 0x80
		D1.u16 = 0x0108
		D5.u16 = 0x86ca
		A1 += 2
		if (D4.s16 >= 0)
		{
			writeToSpriteTable(renderQueue)
		}
	}
	return true
}

//@ Original function taken from sonic3air_dev/scripts/objects/basics/monitor.lemon
function u64 ExtraChar.getIconSpriteKey_char168(u8 type)
{
	if (type == 0x00)
		return "monitor_icon_static"
	else if (type == 0x01)
		return "monitor_icon_Ashura"
	else if (type == 0x02)
		return "monitor_icon_robotnik"
	else if (type == 0x03)
		return "monitor_icon_ring"
	else if (type == 0x04)
	 {
	  if (Ashurashoes == 1)
	 {
	  if (Ashurashoes.palette == 0)
	   return "monitor_AshuraSonicStyled_speedshoes"
	  if (Ashurashoes.palette == 1)
	   return "monitor_Ashura_speedshoes"
	  if (Ashurashoes.palette == 2)
	   return "monitor_AshuraY_speedshoes"
	  if (Ashurashoes.palette == 3)
	   return "monitor_AshuraFIUZ11_speedshoes"
	if (Ashurashoes.palette == 4)
	return "monitor_AshuraINVERTED_speedshoes"
	if (Ashurashoes.palette == 5)
	return "monitor_AshuraR_speedshoes"
if (Ashurashoes.palette == 6)
return "monitor_AshuraBNP_speedshoes"

	  }
	 else return "monitor_icon_speedshoes"
	 }
	else if (type == 0x05)
		return "monitor_icon_fireshield"
	else if (type == 0x06)
		return "monitor_icon_lightningshield"
	else if (type == 0x07)
		return "monitor_icon_ring"
	else if (type == 0x08)
		return "monitor_icon_invincibility"
	else if (type == 0x09)
		return "monitor_icon_super"
	else if (type == 0x0b)
		return "monitor_icon_classicshield"

	return 0x00
}

//@ Original function taken from sonic3air_dev/scripts/standalone/rendering/render_character.lemon
function void ExtraChar.drawCharacterSprite_char168()
{
	u64 key = pop()
	bool asSmallGhost = pop()
	s16 py = s16(pop())
	s16 px = s16(pop())
	u8 variant = pop()
	u8 character = pop()
	
	bool isPlayer1 = (variant == 0)
	u32 characterAddress = isPlayer1 ? 0xffffb000 : 0xffffb04a

	// Check only needed for Tails' tails
	if (variant == 2)
	{
		// No smooth rotation in Slot Machine
		if (global.zone == 0x15)
		{
			push(false)
			return
		}
		
		characterAddress = 0xffff0000 + u16[A0 + 0x30]

		// Do not render when blinking after hit
		if (u8[characterAddress + 0x34] != 0 && ((u8[characterAddress + 0x34] + 1) & 0x04) == 0)
		{
			// Prevent emulator-like rendering
			push(true)
			return
		}

		// Do not render when Tails looks into the background (e.g. LBZ 2 end cutscene) and in DEZ gravity transporters
		if (u8[characterAddress + 0x22] >= 0x55 && u8[characterAddress + 0x22] <= 0x5b)
		{
			// Prevent emulator-like rendering
			push(true)
			return
		}

		isPlayer1 = (characterAddress == 0xffffb000)
		character = CHARACTER_TAILS
	}

	if (level.vertical_wrap == 0xff00)
	{
		// For vertically wrapping levels, "normalize" py into interval [-move_area.bottom.target * 3/4, -move_area.bottom.target * 1/4]
		py &= level.height.bitmask
		if (py > move_area.bottom.target * 3/4 && move_area.bottom.target >= 0xe0)	// move_area.bottom.target is very low in DEZ boss act
			py -= move_area.bottom.target
	}

	u8 animationSprite = char.animation.sprite
	u16 animationSpriteEx = Standalone.getModdedAnimationSpriteEx(character, animationSprite)
	u8 flags = (char.render_flags & (SPRITE_FLAG_FLIP_X | SPRITE_FLAG_FLIP_Y))
	u8 angle = 0
	key = Standalone.getModdedAnimationSpriteKey(character, animationSpriteEx)		// First ask modded scripts
	u8 rotationMode = 0

	if (variant < 2)
	{
		if (character == CHARACTER_SONIC && animationSpriteEx == animationSprite && AshuraSprites != 2)	// Last check is only false if modded scripts made their own changes
		{
			// Special handling for Drop Dash & Super Peel-Out
			if (char.state == char.state.SONIC_DROPDASH)
			{
				animationSpriteEx = CHAR_ANIMSPRITE_SONIC_DROPDASH + ((level.framecounter >> 1) & 0x01)
			}
			else if (!super.active && animationSprite >= 0x21 && animationSprite <= 0x30)
			{
				if (sonic.fastrunanim.timer > 0)
				{
					animationSpriteEx = CHAR_ANIMSPRITE_SONIC_PEELOUT + (level.framecounter & 0x03)

					if (!Game.getSetting(SETTING_SMOOTH_ROTATION))
					{
						angle = (animationSprite - 0x21) / 4 * 0xe0
						if ((char.flags & char.flag.FACING_LEFT) == (global.inv_gravity == 0))
							angle = -angle
						animationSprite = 0x21 + (animationSprite - 0x21) % 4
					}
				}
			}
		}

		if (Game.getSetting(SETTING_SMOOTH_ROTATION))
		{
			// Character
			if (animationSprite >= 0x01 && animationSprite <= 0x20)
			{
				// Walking animation
				animationSprite = 0x01 + (animationSprite - 0x01) % 8
				rotationMode = 1
			}
			else if (animationSprite >= 0x21 && animationSprite <= 0x30)
			{
				// Running animation
				animationSprite = 0x21 + (animationSprite - 0x21) % 4
				rotationMode = 1
			}
			else if (animationSprite >= 0x78 && animationSprite <= 0x7f)
			{
				// Swinging animation
				animationSprite = 0x78
				rotationMode = 2
			}
			else if (character == CHARACTER_TAILS && animationSprite >= 0xc3 && animationSprite <= 0xca)
			{
				// Tails' fastest run animation
				animationSprite = 0xc3 + (animationSprite - 0xc3) % 2
				rotationMode = 1
			}
			else if (character == CHARACTER_KNUCKLES && animationSprite == 0xc0)
			{
				// Only for DDZ
				rotationMode = 1
			}

if (rotationMode != 0)
			{
			#if GAMEAPP >= 0x23032500
				bool useVanillaS3AIRRotation = true
				if (Game.getSetting(SETTING_SMOOTH_ROTATION) == 2)
				{
					useVanillaS3AIRRotation = (char.flags & char.flag.IN_AIR || global.zone == 0x0c)	// Use in-air rotation in DDZ
				}

				if (useVanillaS3AIRRotation)
			#endif
				{
					s8 oldRotation = isPlayer1 ? oldRotationPlayer1 : oldRotationPlayer2
					flags = char.flags & char.flag.FACING_LEFT		// This really has to be "char.flags", not "char.render_flags"

					angle = char.rotation
					if (rotationMode == 1)
					{
						if (abs(s8(char.rotation)) <= 0x10 && abs(oldRotation) <= 0x10)
						{
							angle = 0
						}

						if (angle != char.rotation)
						{
							s8 diff = angle - oldRotation
							angle = oldRotation + clamp(diff, -3, 3)
						}
					}	
				}
			#if GAMEAPP >= 0x23032500
				else
				{
					// Mania-accurate rotation #contributed by Elsie The Pict
					u8 oldRotation = isPlayer1 ? oldRotationPlayer1 : oldRotationPlayer2
					flags = char.flags & char.flag.FACING_LEFT		// This really has to be "char.flags", not "char.render_flags"

					angle = char.rotation
					if (rotationMode == 1)
					{
						
						if (char.rotation <= 0x04 || char.rotation >= 0xfc)
							oldRotation = 0
						else
						{
							u32 targetRotation = 0
							if (char.rotation > 0x10 && char.rotation < 0xe8)
								targetRotation = char.rotation
								
							u32 rotate = targetRotation - oldRotation
							u32 shift = (abs(char.groundspeed) <= 0x6000) + 1
							
							if (abs(rotate) >= abs(rotate - 0x100))
							{
								if (abs(rotate - 0x200) < abs(rotate + 0x100))
									oldRotation += (rotate - 0x100) >> shift
								else
									oldRotation += (rotate + 0x100) >> shift
							}
							else
							{
								if (abs(rotate) < abs(rotate + 0x100))
									oldRotation += rotate >> shift
								else
									oldRotation += (rotate + 0x100) >> shift
							}
						}
						
						angle = oldRotation
						angle &= 0xFF
					}
				}
			#endif
			}

			if (isPlayer1)
				oldRotationPlayer1 = angle
			else
				oldRotationPlayer2 = angle
		}

		if (key == 0 && animationSpriteEx >= 0x100)
		{
			// Special handling for Drop Dash & Super Peel-Out
			if (animationSpriteEx >= CHAR_ANIMSPRITE_SONIC_PEELOUT)
			{
				key = stringformat(stringformat("%s_peelout_%d", getCharacterSpriteKey(character)), animationSpriteEx - CHAR_ANIMSPRITE_SONIC_PEELOUT)
			}
			else
			{
				key = stringformat("sonic_dropdash_%d", animationSpriteEx - CHAR_ANIMSPRITE_SONIC_DROPDASH)
			}
		}
		if (isPlayer1)
			timeattack.animSpriteEx = animationSpriteEx

		if (key == 0)
		{
			key = stringformat(stringformat("%s_0x%02x", getCharacterSpriteKey(character)), animationSprite)

			if (!Renderer.hasCustomSprite(key))
			{
				u32 sourceBase    = (character == CHARACTER_SONIC) ? ((animationSprite >= 0xda) ? 0x140060 : 0x100000) : (character == CHARACTER_TAILS) ? ((animationSprite >= 0xd1) ? 0x143d00 : 0x3200e0) : 0x1200e0
				u32 tableAddress  = (character == CHARACTER_SONIC) ? (super.active ? 0x148378 : 0x148182) : (character == CHARACTER_TAILS) ? 0x14a08a : 0x14bd0a
				u32 mappingOffset = (character == CHARACTER_SONIC) ? (super.active ? 0x146816 : 0x146620) : (character == CHARACTER_TAILS) ? 0x148eb8 : 0x14a8d6		// Not really necessary here, we could also use "char.mapping_offset"

				key = Renderer.setupCustomCharacterSprite(sourceBase, tableAddress, mappingOffset, animationSprite, 0x00)
			}
		}
	}
	else
	{
		if (Game.getSetting(SETTING_SMOOTH_ROTATION))
		{
			// Tails' tails
			if (animationSprite >= 0x05 && animationSprite <= 0x14)
			{
				animationSprite = 0x05 + (animationSprite - 0x05) % 4
				angle = lookupAngleByVector(s16[characterAddress + 0x18], s16[characterAddress + 0x1a])

				flags = 0
				if (char.flags & char.flag.FACING_LEFT)
				{
					flags |= SPRITE_FLAG_FLIP_X
					angle += 0x80
				}
				if (global.inv_gravity)
				{
					flags ^= SPRITE_FLAG_FLIP_Y
					angle = -angle
				}
			}
		}

		key = stringformat(stringformat("%s_tails_0x%02x", getCharacterSpriteKey(CHARACTER_TAILS)), animationSprite)
		if (!Renderer.hasCustomSprite(key))
		{
			key = Renderer.setupCustomCharacterSprite(0x336620, 0x344d74, 0x344bb8, animationSprite, 0x00)
		}
	}
	
	if (char.state == 0x31)
	{
		angle = 0
		
		if (char.animation.timer > 5)
			char.animation.timer = 5
		
		if (char.animation.timer == 0)
		{
			char.animation.timer = 5
			++char.animation.frame
		}
		if (char.velocity.y >= 0)
		{
			char.state = char.state.RUNNING
			char.animation.frame = 0
		}
		
		if (char.animation.frame >= 5)
			char.animation.frame = 0
			
		key = stringformat(super.active ? "superashura_springtwirl_%d" :  "ashura_springtwirl_%d", char.animation.frame)
	}

	u16 renderQueue = 0xa000 - char.sprite_priority
	u8 atex = (char.sprite_attributes >> 9) & 0x30
	if (EXTENDED_CHARACTER_PALETTES)
		atex = 0x40 + character * 0x20

	if (char.sprite_attributes & sprite_attribute.PRIORITY)
		flags |= SPRITE_FLAG_PRIO

	if (rotationMode != 0 && global.inv_gravity)
	{
		// Correction for inverse gravity
		angle = 128 - angle
		flags ^= SPRITE_FLAG_FLIP_X
	}
	
	// Render character
	if (asSmallGhost)
	{
		Renderer.drawSpriteTinted(key, px, py, atex, flags | SPRITE_FLAG_PRIO, 0xa800, angle, 0xc0ffffff, 0x8000)
	}
	else
	{
		Renderer.drawSprite(key, px, py, atex, flags, renderQueue, angle, 255)
	}

	bool useAfterImages
	if (isPlayer1)
	{
		if ((super.active == 0xff) || (super.active.tails == 0xff))
		{
			useAfterImages = true
		}
		else
		{
			if (Game.getSetting(SETTING_SPEEDUP_AFTERIMGS))
			{
				useAfterImages = ((u8[characterAddress + 0x2b] & char.bonus.SPEED_UP) != 0)
			}
		}
	}

	if (useAfterImages)
	{
		// Additional offset for Sonic charging a Super Peel-Out (either Hyper Sonic or with Speed Shoes)
		s16 afterImagesOffsetX = 0
		if (char.character == CHARACTER_SONIC && char.spindash == 0x80)
		{
			afterImagesOffsetX = (char.groundspeed >> 7) * ((char.flags & char.flag.FACING_LEFT) ? 1 : -1)
		}

		for (s8 i = 3; i > 0; --i)
		{
			A1 = 0xffffe500 + u8(posbackup.offset.player1 - (i * 8 + 4))
			s16 px0 = u16[A1] - camera.foreground.x.u16 + (i * afterImagesOffsetX / 4)
			s16 py0 = u16[A1+2] - camera.foreground.y.u16
			if (level.vertical_wrap == 0xff00)	// Consider vertical level wrap
				py0 &= level.height.bitmask
			
			Renderer.drawSprite(key, px0, py0, atex, flags, renderQueue - i, angle, 192 - i * 32)
		}
	}

	// Prevent emulator-like rendering
	push(true)
	return
}

global u8 AshuraShieldNum
//@ Original function taken from sonic3air_dev/scripts/maingame/character/character.lemon
function void ExtraChar.pressedJumpInMidAir_char168()
{
	// Remove control lock
    char.flags &= ~char.flag.CONTROL_LOCK
	#if STANDALONE
		char.double_jump_state = 1    // Always set this flag; needed for Drop Dash
	#endif

	//In S3D2D Ashura can use his fire dash and the shield powers if active. He should do the same here!
	//For HyperAshura, we should trigger a Hyper flame if directions are pressed. No direction = shield power or fire dash
	//works only with no shield, or with fire shield and not underwater
	u8 input = control.player1.state & 0x0f	// Only directions
	/*if (super.active == 0xff && (char.bonus_effect & char.bonus.ANY_SHIELD) == 0 && ((control.player1.state & CONTROL_RIGHT) || (control.player1.state & CONTROL_LEFT)))
	{
		if ((char.bonus_effect & char.bonus.ANY_SHIELD) == 0)
			AshuraShieldNum = 3
		Character.ClearEnemiesOnScreen()
		global.whiteflash_timeout = 4

		camera.locktime.player1 = 0x2000
		ClearPositionBackup()

		char.double_jump_state = 1
		u8[0xffffcd9c] = 1

		playSound(0x4e)
		
		//Ashura firedashes when without shields: hyper can firedash underwater!
		u8[0xffffcd08] = 1        // That's 0x20 inside the shield object at 0xffffcce8
		char.double_jump_state = 1
		ShieldEffectActive = 1
		s16 vx = 0x950
		if (char.flags & char.flag.FACING_LEFT)
			vx = -vx
		char.velocity.x = vx
		char.velocity.y = 0
		char.velocity.y -= 0x50
		char.groundspeed = vx
		camera.locktime.player1 = 0x2000
		ClearPositionBackup()
		
		playSound(SFX_FIRESHIELDDASH)
	}*/
	if (super.active)
	{
		if (super.active & 0x80)
		{
			Character.ClearEnemiesOnScreen()
			global.whiteflash_timeout = 4
			playSound(0x4e)
		}
		else
		{
			playSound(SFX_SPINDASH_RELEASE)
		}
		
		camera.locktime.player1 = 0x2000
		ClearPositionBackup()

		char.double_jump_state = 1

		if (control.player1.state & CONTROL_UP)
		{
			char.velocity.y = -0x680
			playSound(SFX_LIGHTNINGJUMP)
		}
		else if (control.player1.state & CONTROL_DOWN)
		{
			char.velocity.y = 0x800
			playSound(SFX_BUBBLEBOUNCE)
			AshuraShieldNum = 2
		}
		else if ((control.player1.state & CONTROL_RIGHT) || (control.player1.state & CONTROL_LEFT))
		{
			s16 vx = 0x950
			if (char.flags & char.flag.FACING_LEFT)
				vx = -vx
			char.velocity.x = vx
			char.velocity.y = 0
			char.velocity.y -= 0x50
			playSound(SFX_FIRESHIELDDASH)
		}
		
		if !(super.active & 0x80)
			u8[0xffffcbc0 + 0x20] = 1
		else
			u8[0xffffcd7c + 0x20] = 1

		char.groundspeed = char.velocity.x
	}
	else //normal, super and hyper with no directions and at least a shield
	{
		//if invincible, I have to forcefully draw the fireball
		//and do that by using the custom animation for the no shield attack
		if ((char.bonus_effect & char.bonus.INVINCIBLE) && (!super.active))
		{
			return
		}
		else if (char.bonus_effect & char.bonus.SHIELD_FIRE)
		{
		#if STANDALONE
			if (super.active)
				u8[0xffffcbc0 + 0x20] = 1
			else
		#endif
				u8[0xffffcce8 + 0x20] = 1		// That's 0x20 inside the shield object at 0xffffcce8
			char.double_jump_state = 1
	
			s16 vx = 0x800
			if (char.flags & char.flag.FACING_LEFT)
				vx = -vx
	
			char.velocity.x = vx
			char.velocity.y = 0
			char.groundspeed = vx
			camera.locktime.player1 = 0x2000
			ClearPositionBackup()
			playSound(SFX_FIRESHIELDDASH)
		}
		else if (char.bonus_effect & char.bonus.SHIELD_LIGHTNING)
		{
		#if STANDALONE
			if (super.active)
				u8[0xffffcbc0 + 0x20] = 1
			else
		#endif
				u8[0xffffcce8 + 0x20] = 1
			char.double_jump_state = 1
	
		#if STANDALONE
			if (super.active)
				char.velocity.y = -0x680	// Slightly increasing double jump height for Super Sonic
			else
		#endif
				char.velocity.y = -0x580
			char.jumping = 0
			playSound(SFX_LIGHTNINGJUMP)
		}
		else if (char.bonus_effect & char.bonus.SHIELD_BUBBLE)
		{
		#if STANDALONE
			if (super.active)
				u8[0xffffcbc0 + 0x20] = 1
			else
		#endif
				u8[0xffffcce8 + 0x20] = 1
			char.double_jump_state = 1
	
		#if STANDALONE
			if (!Game.getSetting(SETTING_BUBBLE_SHIELD_BOUNCE))
		#endif
			{
				char.velocity.x = 0
			}
			char.velocity.y = 0x800
			char.groundspeed = 0
			playSound(SFX_BUBBLEBOUNCE)
		}
		else if ((char.bonus_effect & char.bonus.ANY_SHIELD) == 0)
		{
			if (control.player1.state & CONTROL_UP)
			{
				if !(char.flags & char.flag.UNDERWATER)
				{
					AshuraShieldNum = 1
				#if STANDALONE
					if (super.active)
						u8[0xffffcbc0 + 0x20] = 1
					else
				#endif
						u8[0xffffcce8 + 0x20] = 1
					char.double_jump_state = 1
					ShieldEffectActive = 1
				#if STANDALONE
					if (super.active)
						char.velocity.y = -0x680	// Slightly increasing double jump height for Super Sonic
					else
				#endif
						char.velocity.y = -0x580
					char.jumping = 0
					playSound(SFX_LIGHTNINGJUMP)
				}
			}
			else if (control.player1.state & CONTROL_DOWN)
			{
				AshuraShieldNum = 2
			#if STANDALONE
				if (super.active)
					u8[0xffffcbc0 + 0x20] = 1
				else
			#endif
					u8[0xffffcce8 + 0x20] = 1
				char.double_jump_state = 1
				ShieldEffectActive = 1
			#if STANDALONE
				if (!Game.getSetting(SETTING_BUBBLE_SHIELD_BOUNCE))
			#endif
				{
					char.velocity.x = 0
				}
				char.velocity.y = 0x800
				char.groundspeed = 0
				playSound(SFX_BUBBLEBOUNCE)
			}
			else if ((control.player1.state & CONTROL_RIGHT) || (control.player1.state & CONTROL_LEFT))
			{
				if !(char.flags & char.flag.UNDERWATER)	//can't firedash under water!
				{
					AshuraShieldNum = 3
				#if STANDALONE
					if (super.active)
						u8[0xffffcbc0 + 0x20] = 1
					else
				#endif
						u8[0xffffcce8 + 0x20] = 1
					ShieldEffectActive = 1
					
					char.double_jump_state = 1
					s16 vx = 0x800
					if (char.flags & char.flag.FACING_LEFT)
						vx = -vx
					char.velocity.x = vx
					char.velocity.y = 0
					char.groundspeed = vx
					camera.locktime.player1 = 0x2000
					ClearPositionBackup()
					
					playSound(SFX_FIRESHIELDDASH)
				}
			}
		}
	}
}

//@ Original function taken from sonic3air_dev/scripts/maingame/character/character.lemon
function void ExtraChar.updateGroundMoves_char168()
{
	return
}

//@ Original function taken from sonic3air_dev/scripts/maingame/character/character.lemon
function bool ExtraChar.updateNormalState_char168()
{
	// Do nothing, and run the normal normal state update
	return false
}

//@ Original function taken from sonic3air_dev/scripts/maingame/character/character.lemon
function void ExtraChar.onCollisionWithDynamicObject_char168()
{
	// Example values for u8[A1 + 0x28]:
	//  - 0x06, 0x0b, 0x17, 0x1a = Different types of enemies
	//  - 0x0f		 = Boss enemy
	//  - 0x18		 = Extended arm of DEZ Chainspike
	//  - 0x23		 = AIZ Bloominator
	//  - 0x46		 = Monitor
	//  - 0x47		 = Dynamic ring
	//  - 0x87		 = Extended arm of SOZ Skorp
	//  - 0x8b, 0x9c = Flames, damaging parts of enemies
	//  - 0x8f		 = Wrecking ball
	//  - 0x98, 0x9b = Projectile
	//  - 0xd8		 = Thrown mushroom, stars over starpost

	D1.u8 = u8[A1 + 0x28] & 0xc0
	if (D1.u8 == 0)
	{
		// Collision is an enemy, i.e. is harmful, but can be attacked
		bool attacking = false
		if (char.bonus_effect & char.bonus.INVINCIBLE)
		{
			attacking = true
		}
		else if (char.state == char.state.ROLLING || char.state == char.state.SPINDASH)
		{
			attacking = true
		}
	#if STANDALONE
		else if (Game.getSetting(SETTING_DROPDASH) && char.character == CHARACTER_SONIC && char.state == char.state.SONIC_DROPDASH)
		{
			attacking = true
		}
	#endif

		if (!attacking)
		{
			bool isThreat = false
			if (char.character == CHARACTER_KNUCKLES)
			{
				isThreat = (char.double_jump_state != 1 && char.double_jump_state != 3)
			}
			else if (char.character == CHARACTER_SONIC || char.double_jump_state == 0 || (char.flags & char.flag.UNDERWATER))
			{
				isThreat = true
			}
			else
			{
				s16 dx = char.position.x.u16 - objA1.position.x.u16
				s16 dy = char.position.y.u16 - objA1.position.y.u16
				D0.u8 = lookupAngleByVector(dx, dy) - 0x20
				isThreat = (D0.u8 >= 0x40)
			}

			if (isThreat)
			{
				Character.OnThreatCollision()
				return
			}
		}
		
		if (AshuraShieldNum != 3)
		{
			AshuraShieldNum = 0
		}

		if (u8[A1 + 0x29] != 0)
		{
			char.velocity.x = -char.velocity.x
			char.velocity.y = -char.velocity.y
			char.groundspeed = -char.groundspeed
			u8[A1 + 0x1c] = A0.u8
			u8[A1 + 0x25] = u8[A1 + 0x28]
			u8[A1 + 0x28] = 0
			--u8[A1 + 0x29]
			if (u8[A1 + 0x29] == 0)
			{
				u8[A1 + 0x2a] |= 0x80
			}

			if (char.character == CHARACTER_KNUCKLES)
			{
				if (char.double_jump_state == 1)
				{
					char.double_jump_state = 2
					char.state = char.state.KNUX_FALLING

					if (char.velocity.x >= 0)
						char.flags |= char.flag.FACING_LEFT
					else
						char.flags &= ~char.flag.FACING_LEFT

					char.hitbox_extends.x = char.hitbox.default.x
					char.hitbox_extends.y = char.hitbox.default.y
				}
			}
		}
		else
		{
			if (u8[A1 + 0x2a] & 0x04)
			{
				A2 = 0xffff0000 + u16[A1 + 0x3c]
				u8[A2] &= ~(1 << u8[A1 + 0x3b])
			}

			u8[A1 + 0x2a] |= 0x80

			// Grant bonus points
			Enemy.addScore(A1, 0x010216)

			objA1.update_address = 0x01e5e0
			u8[A1 + 0x05] = 0
			if (char.velocity.y < 0)
			{
				char.velocity.y += 0x100
			}
			else if (char.position.y.u16 >= objA1.position.y.u16)
			{
				char.velocity.y -= 0x100
			}
			else
			{
				char.velocity.y = -char.velocity.y
			}
		}
	}
	else if (D1.u8 == 0x40)
	{
		D0.u8 = u8[A1 + 0x28] & 0x3f
		if (D0.u8 != 0x06)
		{
			// Collect ring, but only after 30 invulnerability frames
			//  -> Remember that the "char.invuln.countdown" timer starts at 120
			u8 timer = competition_mode.active ? char.invuln.countdown : u8[0xffffb034]
			if (timer < 90)
			{
				u8[A1 + 0x05] = 0x04
			}
		}
		else
		{
			if (AshuraShieldNum != 3)
			{
				AshuraShieldNum = 0
			}
			// This part seems to be for monitors specifically
			s16 vy = (global.inv_gravity) ? -char.velocity.y : char.velocity.y
			bool movingUp = (objA1.render_flags & render_flag.FLIP_Y) ? (vy > 0) : (vy < 0)
			if (movingUp)
			{
				if (u8[A1 + 0x2a] & char.flag.IN_AIR)
				{
					if ((objA1.render_flags & render_flag.FLIP_Y) == 0)
					{
						if (char.position.y.u16 - 0x10 < objA1.position.y.u16)
							return
					}
					else
					{
						if (char.position.y.u16 + 0x10 >= objA1.position.y.u16)
							return
					}

					char.velocity.y = -char.velocity.y
					objA1.velocity.y = -0x180
					if (u8[A1 + 0x3c] == 0)
						u8[A1 + 0x3c] = 4

					return
				}
				else
				{
				#if STANDALONE
					if (u8[A1 + 0x2a] & char.flag.PUSHING)
					{
						// In S3AIR, do not allow S&K's monitor opening from the side
						//  -> This is done to be more consistent with other Sonic games, incl. Sonic 1, 2, CD, Mania and even Sonic 3 alone
						return
					}
					// TODO: Unfinished code here -- it works, but the falling monitor can crush the player, and is this really what we want?
				/*
					else
					{
						// Hit monitor from below, make it fall
						u8[A1 + 0x3c] = 1

						char.velocity.y = -char.velocity.y
						objA1.velocity.y = -0x180
						if (u8[A1 + 0x3c] == 0)
							u8[A1 + 0x3c] = 4
						return
					}
				*/
				#endif
				}
			}

			if (A0 != 0xffffb000 && competition_mode.active == 0)
			{
				// Sorry player 2, you can't open monitors in normal game
				return
			}

			bool canOpenMonitor = false
			if (char.state == char.state.ROLLING)
			{
				canOpenMonitor = true
			}
		#if STANDALONE
			else if (Game.getSetting(SETTING_DROPDASH) && char.character == CHARACTER_SONIC && char.state == char.state.SONIC_DROPDASH)
			{
				canOpenMonitor = true
			}
		#endif
			else if (char.character == CHARACTER_KNUCKLES)
			{
				canOpenMonitor = (char.double_jump_state == 1 || char.double_jump_state == 3)
			}

			if (canOpenMonitor)
			{
				// Bounce off
				char.velocity.y = -char.velocity.y
				u8[A1 + 0x05] = 4
				u16[A1 + 0x42] = A0.u16
			}
		}
	}
	else if (D1.u8 == 0x80)
	{
		// Harmful object
		Character.OnThreatCollision()
		if (AshuraShieldNum != 3)
		{
			AshuraShieldNum = 0
		}
	}
	else  // D1.u8 == 0xc0
	{
		// Other interactable object
		fn0103ba()
		if (AshuraShieldNum != 3)
		{
			AshuraShieldNum = 0
		}
	}
}

function void ExtraChar.onThreatCollision_char168()
{
	// Check for shield or invincibility
	D0.u8 = char.bonus_effect & 0x73
	if (D0.u8 != 0 && AshuraShieldNum == 0)
	{
		D0.u8 &= u8[A1 + 0x2b]
		if (D0.u8 != 0)
		{
			D0 = 0xffffffff
			return
		}

		if ((char.bonus_effect & char.bonus.ANY_SHIELD) == 0)
		{
			if ((char.bonus_effect & char.bonus.INVINCIBLE) == 0)
			{
				Character.OnThreatCollisionInner()
			}
			D0 = 0xffffffff
			return
		}
	}
	else
	{
		// Sonic can deflect projectiles during active Insta-shield, Knuckles while gliding, and Tails sometimes during flight
		bool canDeflect = (char.double_jump_state == 1 && AshuraShieldNum == 0)
	#if STANDALONE
		// Different approach for Tails: Deflect only projectiles that are above him, and only if flying
		if (char.character == CHARACTER_TAILS)
		{
			canDeflect = (s16(objA1.position.y.u16) < s16(objA0.position.y.u16)) && (char.state == char.state.TAILS_FLYDOWN || char.state == char.state.TAILS_FLYUP || char.state == char.state.TAILS_CARRYDOWN || char.state == char.state.TAILS_CARRYUP)
		}
	#endif
		if (!canDeflect)
		{
			Character.OnThreatCollisionInner()
			return
		}
	}

	if ((u8[A1 + 0x2b] & 0x08) == 0 && AshuraShieldNum == 0)
	{
		if ((char.bonus_effect & char.bonus.INVINCIBLE) == 0)
		{
			Character.OnThreatCollisionInner()
		}
	}
	else
	{
		deflectProjectile()
	}
	D0 = 0xffffffff
}

function bool ExtraChar.checkStartJump_char168()
{
	u8 input_pressed = (char.character == CHARACTER_TAILS) ? control.tails.pressed : control.player1.pressed
	if ((input_pressed & CONTROL_ABC) == 0)
		return false
		
	AshuraShieldNum = 0
	
	D0 = char.rotation
	if (global.inv_gravity)
	{
		D0.s8 = -D0.s8
	}
	else
	{
		D0.s8 += 0x80
	}

	pushA456()
	fn00f72e()
	popA456()

	if (D1.s16 < 6)
		return false

	// Get jump acceleration depending on character
	u16 acceleration
	if (char.character != CHARACTER_KNUCKLES || competition_mode.active)
	{
		if (char.flags & char.flag.UNDERWATER)
		{
			acceleration = 0x380
		}
		else if (super.active && char.character == CHARACTER_SONIC)
		{
			acceleration = 0x800
		}
		else
		{
			acceleration = 0x680
		}
	}
	else
	{
		if (char.flags & char.flag.UNDERWATER)
		{
			acceleration = 0x300
		}
		else
		{
			acceleration = 0x600
		}
	}

	u8 angle = char.rotation - 0x40
	s32 accel_x = (s32(lookupCos(angle)) * acceleration) >> 8
	s32 accel_y = (s32(lookupSin(angle)) * acceleration) >> 8

	char.velocity.x += accel_x
	char.velocity.y += accel_y

	char.flags |= char.flag.IN_AIR
	char.flags &= ~char.flag.PUSHING

	char.jumping = 1
	char.on_convex_surface = 0

	playSound(SFX_JUMP)

	// Start roll jump
	if (char.flags & char.flag.ROLLING)
	{
	#if STANDALONE
		if (!Game.getSetting(SETTING_NO_CONTROL_LOCK))
	#endif
		{
			char.hitbox_extends.x = char.hitbox.default.x
			char.hitbox_extends.y = char.hitbox.default.y
			char.flags |= char.flag.CONTROL_LOCK
		}
	}
	else
	{
		char.hitbox_extends.x = 7
		char.hitbox_extends.y = 14
		char.flags |= char.flag.ROLLING
		char.state = char.state.ROLLING

		s8 dy = s8(char.hitbox_extends.y) - s8(char.hitbox.default.y)
		char.position.y.u16 += global.inv_gravity ? dy : -dy

	#if STANDALONE
		// Glitch fix for Knuckles being unable to jump off underwater objects
		//  -> Move him up a single pixel up so he won't stick to objects
		// TODO: Does not work for the HCZ snake platforms
		if (acceleration <= 0x300 && (char.flags & char.flag.ON_OBJECT))
		{
			--char.position.y.u16
		}
	#endif
	}
	return true
}

function bool Standalone.onWriteToSpriteTable(s16 px, s16 py, u16 renderQueue)
{
	u8 flags = ((objA0.render_flags & 0x01) ? SPRITE_FLAG_FLIP_X : 0) | ((objA0.render_flags & 0x02) ? SPRITE_FLAG_FLIP_Y : 0) | ((objA0.sprite_attributes & 0x8000) ? SPRITE_FLAG_PRIO : 0)
	bool prioFlag = (objA0.sprite_attributes & 0x8000) != 0
	if (global.xtrachar == 168 && isMainCharacter(CHARACTER_SONIC))
	{
		if (objA0.update_address == 0x2104c0)
		{
			if (AshuraShieldNum == 1)
			{
				return false
				/*u64 key = "ashura_electric"
				if (global.framecounter.low & 0x01)
					Renderer.drawCustomSprite(key, px, py, 0, flags, renderQueue)*/
			}
			else if (AshuraShieldNum == 2)
			{
				return false
				
				/*u64 key = stringformat("ashurabubble_0x%02x", objA0.animation.sprite)
				if (Renderer.hasCustomSprite(key))
					Renderer.drawCustomSprite(key, px, py, 0, flags, renderQueue)*/
			}
			else if (AshuraShieldNum == 3)
			{
				if (AshuraDash != 0)
				{
					u64 key = (AshuraDash == 1) ? stringformat("ashurafire_blue_0x%02x", objA0.animation.sprite) : (AshuraDash == 2) ? stringformat("ashurafire_black_0x%02x", objA0.animation.sprite) : stringformat("ashurafire_green_0x%02x", objA0.animation.sprite)
					if (Renderer.hasCustomSprite(key))
						Renderer.drawCustomSprite(key, px, py, 0, flags, renderQueue)
				}
			}
			
			return true
		}
		
		if (objA0.update_address == 0x21a50c)
		{
			u64 key = (AshuraSprites != 2) ? stringformat("168intro_%d", objA0.animation.sprite) : stringformat("168intro_%d_2", objA0.animation.sprite)
			u8 atex = 0x40 + 0x20 * getMainCharacter()
			if (Renderer.hasCustomSprite(key))
				Renderer.drawCustomSprite(key, px, py, atex, (objA0.render_flags & 0x01) | (prioFlag ? SPRITE_FLAG_PRIO : 0), 0xa000 - u16[0xffffb00a])
			return true
		}
		
		if (objA0.update_address == 0x0837b2)
		{
			if(objA0.animation.sprite == 0x00)//ASHURA
			{
				u8 atex = 0x40 + 0x20 * getMainCharacter()
				if (AshuraSign == 0)
				{
					Renderer.drawCustomSprite("signpost_slot168_1", px, py, atex, prioFlag ? SPRITE_FLAG_PRIO : 0 , renderQueue)
				}
				else
				{
					Renderer.drawCustomSprite("signpost_slot168_2", px, py, atex, prioFlag ? SPRITE_FLAG_PRIO : 0 , renderQueue)
				}
				return true
			}
		}
		
		if (objA0.update_address == 0x05ea52)
		{
			// Render additional sprite on top
			if (char.render_flags & 0x01)
				Renderer.drawCustomSprite("HurricaneLeft", px, py, 0, 0x00, renderQueue + 1)
			else
				Renderer.drawCustomSprite("HurricaneRight", px, py, 0, objA0.render_flags | (prioFlag ? SPRITE_FLAG_PRIO : 0), renderQueue + 1)
			
			return false
		}
		
		if (objA0.update_address == 0x05ebb4)
		{
			u8 atex = 0x40 + 0x20 * getSecondCharacter()
			u64 key = "AshuraEndingNPC"
			Renderer.drawCustomSprite(key, px, py, atex, (objA0.render_flags & 0x01) | (prioFlag ? SPRITE_FLAG_PRIO : 0), renderQueue, 0, 255)
			return true
		}
		
		if (objA0.update_address == 0x05ed18)
		{
			u8 atex = 0x40 + 0x20 * getSecondCharacter()
			u64 key
			if (objA0.subtype2c == 0) //standing character
				key = "MiniAshura"
			else //driver (and extra passenger)
				key = "AshuraEndingSmallNPC"
			Renderer.drawCustomSprite(key, px, py, atex, (objA0.render_flags & 0x01) | (prioFlag ? SPRITE_FLAG_PRIO : 0), renderQueue, 0, 255)
			return true
		}
		
		if(objA0.update_address == 0x05e08a)
		{
			u8 atex = 0x40 + 0x20 * getMainCharacter()
			Renderer.drawCustomSprite("HurricaneSmall1", px+2, py, atex, (objA0.render_flags & 0x01) | (prioFlag ? SPRITE_FLAG_PRIO : 0), renderQueue)
			return true
		}
	
		if(objA0.update_address == 0x05d86a)
		{
			u8 atex = 0x40 + 0x20 * getMainCharacter()
			u64 key
			
			//if flying left use the micro character
			if (char.render_flags & 0x01)
			{
				key = "MicroAshura"
			}
			else
			{ //check the sprite value
				//0x00 is invisible, so nothing to render
				if(objA0.animation.sprite == 0)
				{
					return false
				}
				else if (objA0.animation.sprite == 0x01)
				{
					key = "HurricaneSmall1"
				}
				else if (objA0.animation.sprite == 0x02)
				{
					key = "HurricaneSmall2"
				}
				else if (objA0.animation.sprite == 0x03)
				{
					key = "HurricaneSmall3"
				}
			}
			Renderer.drawCustomSprite(key, px, py, atex, (objA0.render_flags & 0x01) | (prioFlag ? SPRITE_FLAG_PRIO : 0), renderQueue+1)
			return true
		}
	}
	
	return base.Standalone.onWriteToSpriteTable(px, py, renderQueue)
}

function string getESCharacterFallSpriteKey(u8 character, u8 extrachar)
{
	if (extrachar == 168 && character == CHARACTER_SONIC && AshuraSprites == 2)
	{
		return (super.active) ? "Sonic2AbsAhsura_Super" : "Sonic2AbsAhsura"
	}
	
	return base.getESCharacterFallSpriteKey(character, extrachar)
}

function s32 ESS_saveBoxGetColor_Es(u8 ES_val)
{
	if (ES_val == 168)
		return 0xfa9128
	
	return base.ESS_saveBoxGetColor_Es(ES_val)
}

function string getCharacterBluespherePaletteKey(u8 character)
{
	if (character == CHARACTER_SONIC && u8[0xffffe654] == 0xa8)
	{
		if (Ashurashoes.palette == 1)
			return "blueshoes_palette" // this is a madeup file name
		else if (Ashurashoes.palette == 2)
			return "yellowshoes_palette"
		else if (Ashurashoes.palette == 3)
			return "promo_palette"
		else
			return "redshoes_palette"
	}
	return base.getCharacterBluespherePaletteKey(character)
}

function u64 Standalone.getModdedSoundKey(u64 soundKey, u8 sfxId, u8 soundRegType)
{
    if (sfxId == 0x0b && Mods.isModActive("Songs For Knuckles and Extra Slot characters"))
    {    
	    if (global.xtrachar == 168)
            return "0b_ash"
    }
	else if (sfxId == 0x01 && Mods.isModActive("Songs For Knuckles and Extra Slot characters"))
	{
        if (global.xtrachar == 168) 
            return "01_ash"
    }
    else if (sfxId == 0x0a && Mods.isModActive("Songs For Knuckles and Extra Slot characters"))
    { 
        if (global.xtrachar == 168) 
            return "0a_ash"
    }
    else if (sfxId == 0xdc && Mods.isModActive("Songs For Knuckles and Extra Slot characters"))
    {
    if (global.xtrachar == 168) 
            return "dc_ash"
	}		
	else if (sfxId == 0x04 && Mods.isModActive("Songs For Knuckles and Extra Slot characters"))
    {
    if (global.xtrachar == 168) 
            return "04_ash"
    }
	else if (sfxId == 0x1a && Mods.isModActive("Songs For Knuckles and Extra Slot characters"))
    {
    if (global.xtrachar == 168) 
            return "1a_ash"
	}		
    return base.Standalone.getModdedSoundKey(soundKey, sfxId, soundRegType)
}
function string getCharacterSpriteKey(u8 character, bool isSuperActive)
{
 	if (character == CHARACTER_SONIC && global.xtrachar == 168 && char.state != 0x31)
 	{
   		if (AshuraSprites == 0)
  			return (super.active) ? "character_superslot168" : "character_slot168"
  		if (AshuraSprites == 1)
  			return (super.active) ? "cooler_superashura" : "cooler_ashura"
  		if (AshuraSprites == 2)
  			return (super.active) ? "absolute_superashura" : "absolute_ashura"
  	}
   	return base.getCharacterSpriteKey(character, isSuperActive)
}

function string getESCharacterFallSpriteKey(u8 character, u8 extrachar)
{
	if (extrachar == 168 && character == CHARACTER_SONIC)
	{
		return (super.active) ? "Falling_SuperAshura" : "Falling_Ashura"
	}
	return base.getESCharacterFallSpriteKey(character, extrachar)
}

function u64 GetXtraName(u8 xtrachar, u8 char)
{
	if (xtrachar == 168 && char == CHARACTER_SONIC)
		return "slot168"
	return base.GetXtraName(xtrachar, char)
}